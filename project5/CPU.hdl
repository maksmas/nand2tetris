// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[15], b=instruction[4], out=loadd);

    Not(in=instruction[15], out=ni15);
    Or(a=ni15, b=instruction[5], out=loada);

    And(a=instruction[1], b=iszero, out=jj1);
    And(a=instruction[2], b=isneg, out=jj2);
    
    Not(in=iszero, out=notiszero);
    And(a=instruction[2], b=instruction[0], out=j1andj3);
    And(a=j1andj3, b=notiszero, out=jj3);

    Not(in=isneg, out=ispos);
    And(a=instruction[0], b=notiszero, out=j3andnotzero);
    And(a=j3andnotzero, b=ispos, out=jj4);

    Or(a=jj1, b=jj2, out=tmp1);
    Or(a=tmp1, b=jj3, out=tmp2);
    Or(a=tmp2, b=jj4, out=jumpt);
    And(a=jumpt, b=instruction[15], out=jump);
    Not(in=jump, out=notjump);

    PC(in=aregister, load=jump, inc=notjump, reset=reset, out[0..14]=pc); 

    Mux16(a=instruction, b=aluout, sel=instruction[15], out=mux1out);

    ARegister(in=mux1out, load=loada, out=aregister, out[0..14]=addressM);

    Mux16(a=aregister, b=inM, sel=instruction[12], out=mux2out);

    DRegister(in=aluout, load=loadd, out=dregister);

    ALU(y=mux2out, x=dregister, 
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluout,
        out=outM,
        zr=iszero,
        ng=isneg);
}